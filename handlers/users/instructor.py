from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup, CallbackQuery
import requests
from data.config import BASE_URL
from states.instructor import DeleteIns
from states.instructor import InstructorForm, EditInstructor
from aiogram.dispatcher import FSMContext
from loader import dp
from keyboards.default.register import genders, regions, categories, card_btn, text_ins_reg, text_ins_up
from keyboards.default.is_authenticated import menu_instructor, location_btn, profile_delete
from keyboards.inline.edit_profile import instructor
from keyboards.inline.sessions import sessions
import re

lang = ''


@dp.message_handler(text=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≤–∏–¥–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞', '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à'])
async def register(mes: Message):
    global lang
    if mes.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∏—Ñ–∞—Ç–∏–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à':
        lang = 'uz'
        await mes.answer(text_ins_reg()['ism'], reply_markup=ReplyKeyboardRemove())
    elif mes.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≤–∏–¥–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞':
        lang = 'ru'
        await mes.answer(text_ins_reg()['ism_ru'], reply_markup=ReplyKeyboardRemove())
    await InstructorForm.ism.set()


@dp.message_handler(state=InstructorForm.ism)
async def ism(mes: Message, state: FSMContext):
    await state.update_data(
        {"ism": mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['familiya'])
    else:
        await mes.answer(text_ins_reg()['familiya_ru'])
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.familiya)
async def familiya(mes: Message, state: FSMContext):
    await state.update_data(
        {'familiya': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['telefon'])
    else:
        await mes.answer(text_ins_reg()['telefon_ru'])
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.telefon, regexp=re.compile(r"^[378]{2}|9[01345789]\d{7}$"))
async def telefon(mes: Message, state: FSMContext):
    await state.update_data(
        {'telefon': f"998{mes.text}"}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['jins'], reply_markup=genders(lang))
    else:
        await mes.answer(text_ins_reg()['jins_ru'], reply_markup=genders(lang))
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.telefon, content_types='text')
async def st(mes: Message):
    if lang == 'uz':
        await mes.answer(text_ins_reg()['telefon_qayta'])
    else:
        await mes.answer(text_ins_reg()['telefon_qayta_ru'])
    await InstructorForm.telefon.set()


@dp.message_handler(state=InstructorForm.jins)
async def gender(mes: Message, state: FSMContext):
    await state.update_data(
        {'jins': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['manzil'], reply_markup=regions())
    else:
        await mes.answer(text_ins_reg()['manzil_ru'], reply_markup=regions())
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.tuman)
async def region(mes: Message, state: FSMContext):
    await state.update_data(
        {'tuman': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['categoriya'], reply_markup=categories())
    else:
        await mes.answer(text_ins_reg()['categoriya_ru'], reply_markup=categories())
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.toifa)
async def category(mes: Message, state: FSMContext):
    await state.update_data(
        {'toifa': mes.text}
    )
    cat = await state.get_data()
    res = requests.get(url=f"{BASE_URL}/instructor/cars/?cat={cat['toifa']}")
    rg = res.json()
    markup = ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    for i in rg:
        markup.insert(KeyboardButton(text=f"{i['nomi']}"))
    if lang == 'uz':
        await mes.answer(text_ins_reg()['moshina'], reply_markup=markup)
    else:
        await mes.answer(text_ins_reg()['moshina_ru'], reply_markup=markup)
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.moshina)
async def car(mes: Message, state: FSMContext):
    await state.update_data(
        {'moshina': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['moshina_nomeri'], reply_markup=ReplyKeyboardRemove())
    else:
        await mes.answer(text_ins_reg()['moshina_nomeri_ru'], reply_markup=ReplyKeyboardRemove())
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.nomeri, regexp=re.compile(
    r"^[0-9][150][ -]([A-Z][ -][0-9]{3}[ -][A-Z]{2})|([0-9]{3}[ -][A-Z]{3})$"))
async def create_instructor(mes: Message, state: FSMContext):
    await state.update_data(
        {'nomeri': mes.text, 'telegram_id': mes.from_user.id}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['karta'], reply_markup=card_btn(lang))
    else:
        await mes.answer(text_ins_reg()['karta_ru'], reply_markup=card_btn(lang))
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.card)
async def card(mes: Message, state: FSMContext):
    await state.update_data(
        {'card': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_ins_reg()['lacatsiya'], reply_markup=location_btn(lang))
    else:
        await mes.answer(text_ins_reg()['lacatsiya_ru'], reply_markup=location_btn(lang))
    await InstructorForm.next()


@dp.message_handler(state=InstructorForm.location, content_types='location')
async def get_location(mes: Message, state: FSMContext):
    data = await state.get_data()
    data['location'] = f"{mes.location['latitude']}, {mes.location['longitude']}"
    res = requests.post(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    r = res.json()
    if lang == 'uz':
        await mes.answer(f"{mes.from_user.first_name} {r['message']}", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"{mes.from_user.first_name} {r['message_ru']}", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(state=InstructorForm.nomeri, content_types='text')
async def st(mes: Message):
    if lang == 'uz':
        await mes.answer(text_ins_reg()['moshina_nomeri_qayta'])
    else:
        await mes.answer(text_ins_reg()['moshina_nomeri_qayta_ru'])
    await InstructorForm.nomeri.set()


# @dp.message_handler(text="–ë–æ—Ç “≥–∏—Å–æ–±–∏–Ω–≥–∏–∑–¥–∞–Ω –æ–ª–∞–¥–∏–≥–∞–Ω —Ö–∏–∑–º–∞—Ç “≥–∞“õ–∏")
# async def price(mes: Message):
#     r1 = requests.get(url=f"{BASE_URL}/session/percent/")
#     p1 = r1.json()
#     text = ""
#     for j in p1:
#         text += f"–ú–∞—à“ì—É–ª–æ—Ç–Ω–∏–Ω–≥ —É–º—É–º–∏–π —Å—É–º–º–∞—Å–∏–¥–∞–Ω –±–æ—Ç <b>{j['percent']}</b> % –æ–ª–∞–¥–∏\n"
#     await mes.answer(text)


@dp.message_handler(text=["üë®‚Äç‚úàÔ∏èÔ∏è–ü—Ä–æ—Ñ–∏–ª", "üë®‚Äç‚úàÔ∏èÔ∏è–ü—Ä–æ—Ñ–∏–ª—å"])
async def get_profile(mes: Message):
    rp = requests.get(url=f"{BASE_URL}/instructor/{mes.from_user.id}/")
    res = rp.json()
    if lang == 'uz':
        text = f"–ò—Å–º–∏–Ω–≥–∏–∑: <b>{res['ism']}</b>\n"
        text += f"–§–∞–º–∏–ª–∏—è–Ω–≥–∏–∑: <b>{res['familiya']}</b>\n"
        text += f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑: <b>{res['telefon']}</b>\n"
        text += f"–ê–≤—Ç–æ–º–æ–±–∏–ª–∏–Ω–≥–∏–∑: <b>{res['moshina']}</b>\n"
        text += f"–Ø—à–∞—à —Ç—É–º–∞–Ω–∏–Ω–≥–∏–∑: <b>{res['tuman']}</b>\n"
        text += f"–¢–æ–∏—Ñ–∞–Ω–≥–∏–∑: <b>{res['toifa_name']}</b>\n"
        # text += f"–ë–∞–ª–∞–Ω—Å–∏–∑–≥–∏–∑: <b>{res['balans']} so'm</b>\n"
        text += f"–î–∞–≤–ª–∞—Ç —Ä–∞“õ–∞–º–∏: <b>{res['nomeri']}</b>\n"
        await mes.answer(text, reply_markup=menu_instructor(lang))
    else:
        text = f"–í–∞—à–µ –∏–º—è: <b>{res['ism']}</b>\n"
        text += f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: <b>{res['familiya']}</b>\n"
        text += f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{res['telefon']}</b>\n"
        text += f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: <b>{res['moshina']}</b>\n"
        text += f"–í–∞—à –∞–¥—Ä–µ—Å: <b>{res['tuman']}</b>\n"
        text += f"–í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{res['toifa_name']}</b>\n"
        # text += f"–ù–µ—É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π: <b>{res['balans']} so'm</b>\n"
        text += f"–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: <b>{res['nomeri']}</b>\n"
        await mes.answer(text, reply_markup=menu_instructor(lang))


@dp.message_handler(text=["üë®‚Äç‚úàÔ∏è–ü—Ä–æ—Ñ–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", "üë®‚Äç‚úàÔ∏è–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"])
async def edit_profile(mes: Message):
    if lang == 'uz':
        await mes.answer("–ù–∏–º–∞–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–º–æ“õ—á–∏—Å–∏–∑?", reply_markup=instructor(lang))
    else:
        await mes.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=instructor(lang))


@dp.message_handler(text=["üë®‚Äç‚úàÔ∏è–ü—Ä–æ—Ñ–∏–ª–Ω–∏ —û—á–∏—Ä–∏—à", "üë®‚Äç‚úàÔ∏è–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"])
async def a(mes: Message):
    if lang == 'uz':
        await mes.answer('–ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑–Ω–∏ —û—á–∏—Ä–º–æ“õ—á–∏–º–∏—Å–∏–∑?', reply_markup=profile_delete(lang))
    else:
        await mes.answer('–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?', reply_markup=profile_delete(lang))
    await DeleteIns.yes_or_no.set()


@dp.message_handler(state=DeleteIns.yes_or_no)
async def delete_profile(mes: Message, state: FSMContext):
    if (mes.text == '“≤–∞') or (mes.text == '–î–∞'):
        rp = requests.delete(url=f"{BASE_URL}/client/delete/{mes.from_user.id}/")
        if rp.status_code == 204:
            if lang == 'uz':
                await mes.answer("–ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑ —û—á–∏—Ä–∏–ª–¥–∏", reply_markup=ReplyKeyboardRemove())
            else:
                await mes.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω", reply_markup=ReplyKeyboardRemove())
        else:
            if lang == 'uz':
                await mes.answer("–ù–∏–º–∞–¥–∏—Ä —Ö–∞—Ç–æ –∫–µ—Ç–¥–∏ “õ–∞–π—Ç–∞–¥–∞–Ω —û—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥!")
            else:
                await mes.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    elif (mes.text == '–ô—û“õ') or (mes.text == '–ù–µ—Ç'):
        if lang == 'uz':
            await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_instructor(lang))
        else:
            await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.callback_query_handler(
    text=['instructor:name', 'instructor:surname', 'instructor:phone', 'car', 'number', 'region', 'cat', 'locate',
          'cart'])
async def set_state(call: CallbackQuery):
    if call.data == "instructor:name":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['ism'])
        else:
            await call.message.answer(text_ins_up()['ism_ru'])
        await EditInstructor.ism.set()
    elif call.data == "instructor:surname":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['familiya'])
        else:
            await call.message.answer(text_ins_up()['familiya_ru'])
        await EditInstructor.familiya.set()
    elif call.data == "instructor:phone":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['telefon'])
        else:
            await call.message.answer(text_ins_up()['telefon_ru'])
        await EditInstructor.telefon.set()
    elif call.data == "car":
        res = requests.get(url=f"{BASE_URL}/instructor/cars/")
        rg = res.json()
        markup = ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
        for i in rg:
            markup.insert(KeyboardButton(text=f"{i['nomi']}"))
        if lang == 'uz':
            await call.message.answer(text_ins_up()['moshina'], reply_markup=markup)
        else:
            await call.message.answer(text_ins_up()['moshina_ru'], reply_markup=markup)
        await EditInstructor.moshina.set()
    elif call.data == "region":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['manzil'], reply_markup=regions())
        else:
            await call.message.answer(text_ins_up()['manzil_ru'], reply_markup=regions())
        await EditInstructor.tuman.set()
    elif call.data == 'cat':
        if lang == 'uz':
            await call.message.answer(text_ins_up()['categoriya'], reply_markup=categories())
        else:
            await call.message.answer(text_ins_up()['categoriya_ru'], reply_markup=categories())
        await EditInstructor.toifa.set()
    elif call.data == "number":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['moshina_nomeri'])
        else:
            await call.message.answer(text_ins_up()['moshina_nomeri_ru'])
        await EditInstructor.nomeri.set()
    elif call.data == "locate":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['lacatsiya'], reply_markup=location_btn(lang))
        else:
            await call.message.answer(text_ins_up()['lacatsiya_ru'], reply_markup=location_btn(lang))
        await EditInstructor.location.set()
    elif call.data == "cart":
        if lang == 'uz':
            await call.message.answer(text_ins_up()['karta'], reply_markup=card_btn(lang))
        else:
            await call.message.answer(text_ins_up()['karta_ru'], reply_markup=card_btn(lang))
        await EditInstructor.card.set()
    await call.answer(cache_time=3)


@dp.message_handler(content_types=['text'], state=EditInstructor.ism)
async def set_name(mes: Message, state: FSMContext):
    data = {'ism': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–ò—Å–º–∏–Ω–≥–∏–∑ <b>{res['ism']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω—ë–Ω <b>{res['ism']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(content_types=['text'], state=EditInstructor.familiya)
async def set_surname(mes: Message, state: FSMContext):
    data = {'familiya': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–§–∞–º–∏–ª–∏—è–Ω–≥–∏–∑ <b>{res['familiya']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω—ë–Ω <b>{res['familiya']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(content_types='location', state=EditInstructor.location)
async def set_surname(mes: Message, state: FSMContext):
    data = {'location': f"{mes.location['latitude']}, {mes.location['longitude']}"}
    requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    if lang == 'uz':
        await mes.answer(f"–ú–∞–Ω–∑–∏–ª–∏–Ω–≥–∏–∑ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å!", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(regexp=re.compile(r"^[378]{2}|9[01345789]\d{7}$"), state=EditInstructor.telefon)
async def set_phone(mes: Message, state: FSMContext):
    data = {'telefon': f"998{mes.text}"}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω–≥–∏–∑ <b>{res['telefon']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω <b>{res['telefon']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(state=EditInstructor.telefon, content_types=['text'])
async def a(mes: Message):
    if lang == 'uz':
        await mes.answer(text_ins_up()['telefon_qayta'])
    else:
        await mes.answer(text_ins_up()['telefon_qayta_ru'])
    await EditInstructor.telefon.set()


@dp.message_handler(content_types=['text'], state=EditInstructor.tuman)
async def set_region(mes: Message, state: FSMContext):
    data = {'tuman': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–Ø—à–∞—à —Ç—É–º–∞–Ω–∏–Ω–≥–∏–∑ <b>{res['tuman']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à –∂–∏–ª–æ–π —Ä–∞–π–æ–Ω –∏–∑–º–µ–Ω—ë–Ω <b>{res['tuman']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(content_types=['text'], state=EditInstructor.toifa)
async def set_cat(mes: Message, state: FSMContext):
    data = {'toifa': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–¢–æ–∏—Ñ–∞–Ω–∏–Ω–≥–∏–∑ <b>{res['toifa_name']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω—ë–Ω <b>{res['toifa_name']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(state=EditInstructor.nomeri, regexp=re.compile(
    r"^[0-9][150][ -]([A-Z][ -][0-9]{3}[ -][A-Z]{2})|([0-9]{3}[ -][A-Z]{3})$"))
async def set_cat(mes: Message, state: FSMContext):
    data = {'nomeri': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–ú–æ—à–∏–Ω–∞–Ω–≥–∏–∑ —Ä–∞“õ–∞–º–∏ <b>{res['nomeri']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!",
                         reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–ù–æ–º–µ—Ä –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã –∏–∑–º–µ–Ω—ë–Ω <b>{res['nomeri']}</b>",
                         reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(state=EditInstructor.nomeri, content_types=['text'])
async def a(mes: Message):
    if lang == 'uz':
        await mes.answer(text_ins_up()['moshina_nomeri_qayta'])
    else:
        await mes.answer(text_ins_up()['moshina_nomeri_qayta_ru'])
    await EditInstructor.nomeri.set()


@dp.message_handler(content_types=['text'], state=EditInstructor.moshina)
async def set_cat(mes: Message, state: FSMContext):
    data = {'moshina': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–ú–æ—à–∏–Ω–∞–Ω–≥–∏–∑ <b>{res['moshina']}</b> –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –∏–∑–º–µ–Ω—ë–Ω <b>{res['moshina']}</b>", reply_markup=menu_instructor(lang))
    await state.finish()


@dp.message_handler(content_types=['text'], state=EditInstructor.card)
async def set_cat(mes: Message, state: FSMContext):
    data = {'card': mes.text}
    requests.patch(url=f"{BASE_URL}/instructor/{mes.from_user.id}/", data=data)
    if lang == 'uz':
        await mes.answer(f"–¢—û–ª–æ–≤ —Ç—É—Ä–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(f"–ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞!", reply_markup=menu_instructor(lang))
    await state.finish()


# @dp.message_handler(text=["üë®‚Äç‚úàÔ∏è–ú–∞—à“ì—É–ª–æ—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏", "üë®‚Äç‚úàÔ∏è–°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π"])
# async def get_sessions(mes: Message):
#     if lang == 'uz':
#         await mes.answer("–ú–∞—à“ì—É–ª–æ—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥üëá", reply_markup=sessions(lang))
#     else:
#         await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫üëá", reply_markup=sessions(lang))
