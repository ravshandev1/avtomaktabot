from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
import requests
import re
from data.config import BASE_URL
from states.client import ClientForm, EditClient, DeleteCl
from aiogram.dispatcher import FSMContext
from loader import dp
from keyboards.default.register import prava, text_client_reg, text_client_up
from keyboards.inline.edit_profile import client
from keyboards.default.is_authenticated import menu_client, action_session, sessions, edit_session, profile_delete
from keyboards.inline.sessions import create_after_sessions_for_cl, before_sessions_for_cl
from utils.notify_admins import notify_session_deleted

lang = ''


@dp.message_handler(text=['–é—Ä–≥–∞–Ω—É–≤—á–∏', '–£—á–µ–Ω–∏–∫'])
async def register(mes: Message):
    global lang
    if mes.text == '–£—á–µ–Ω–∏–∫':
        lang = 'ru'
        await mes.answer(text_client_reg()['ism_ru'], reply_markup=ReplyKeyboardRemove())
    else:
        lang = 'uz'
        await mes.answer(text_client_reg()['ism'], reply_markup=ReplyKeyboardRemove())
    await ClientForm.ism.set()


@dp.message_handler(state=ClientForm.ism)
async def name(mes: Message, state: FSMContext):
    await state.update_data(
        {'ism': mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_client_reg()['familiya'])
    elif lang == 'ru':
        await mes.answer(text_client_reg()['familiya_ru'])
    await ClientForm.next()


@dp.message_handler(state=ClientForm.familiya)
async def surname(mes: Message, state: FSMContext):
    await state.update_data(
        {"familiya": mes.text}
    )
    if lang == 'uz':
        await mes.answer(text_client_reg()['telefon'])
    else:
        await mes.answer(text_client_reg()['telefon_ru'])
    await ClientForm.next()


@dp.message_handler(state=ClientForm.telefon, regexp=re.compile(r"^[378]{2}|9[01345789]\d{7}$"))
async def get_phone(mes: Message, state: FSMContext):
    await state.update_data(
        {'telefon': f"998{mes.text}"}
    )
    if lang == 'uz':
        await mes.answer(text_client_reg()['prava'], reply_markup=prava(lang))
    else:
        await mes.answer(text_client_reg()['prava_ru'], reply_markup=prava(lang))
    await ClientForm.next()


@dp.message_handler(state=ClientForm.telefon, content_types='text')
async def st(mes: Message):
    if lang == 'uz':
        await mes.answer(text_client_reg()['telefon_qayta'])
    else:
        await mes.answer(text_client_reg()['telefon_qayta_ru'])
    await ClientForm.telefon.set()


@dp.message_handler(state=ClientForm.prava)
async def get_cat(mes: Message, state: FSMContext):
    await state.update_data(
        {"prava": mes.text, "telegram_id": mes.from_user.id}
    )
    data = await state.get_data()
    res = requests.post(url=f"{BASE_URL}/client/{mes.from_user.id}/", data=data)
    text = res.json()
    await mes.answer(f"{data['ism']} {text['message']}\n", reply_markup=menu_client(lang))
    if (mes.text == '–ë–æ—Ä') or (mes.text == '–ï—Å—Ç—å'):
        if lang == 'uz':
            await mes.answer(text_client_reg()['prava_bor'])
        else:
            await mes.answer(text_client_reg()['prava_bor_ru'])
    else:
        if lang == 'uz':
            await mes.answer(text_client_reg()['prava_yuq'])
        else:
            await mes.answer(text_client_reg()['prava_yuq_ru'])
    await state.finish()


@dp.message_handler(text=["–ü—Ä–æ—Ñ–∏–ª", "–ü—Ä–æ—Ñ–∏–ª—å"])
async def get_profile(mes: Message):
    rp = requests.get(url=f"{BASE_URL}/client/{mes.from_user.id}/")
    res = rp.json()
    if lang == 'uz':
        text = f"–ò—Å–º–∏–Ω–≥–∏–∑: <b>{res['ism']}</b>\n"
        text += f"–§–∞–º–∏–ª–∏—è–Ω–≥–∏–∑: <b>{res['familiya']}</b>\n"
        text += f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑: <b>{res['telefon']}</b>\n"
        text += f"“≤–∞–π–¥–æ–≤—á–∏–ª–∏–∫ –≥—É–≤–æ“≥–Ω–æ–º–∞–Ω–≥–∏–∑: <b>{res['prava']}</b>"
    else:
        text = f"–í–∞—à–µ –∏–º—è: <b>{res['ism']}</b>\n"
        text += f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: <b>{res['familiya']}</b>\n"
        text += f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{res['telefon']}</b>\n"
        text += f"–í–∞—à–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞: <b>{res['prava']}</b>"
    await mes.answer(text, reply_markup=menu_client(lang))


@dp.message_handler(text=["–ü—Ä–æ—Ñ–∏–ª–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"])
async def edit_profile(mes: Message):
    if lang == 'uz':
        await mes.answer("–ù–∏–º–∞–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–º–æ“õ—á–∏—Å–∏–∑?", reply_markup=client(lang))
    else:
        await mes.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=client(lang))


@dp.callback_query_handler(text=['client:name', 'client:surname', 'client:phone', 'pra'])
async def set_state(call: CallbackQuery):
    if call.data == 'client:name':
        if lang == 'uz':
            await call.message.answer(text_client_up()['ism'])
        else:
            await call.message.answer(text_client_up()['ism_ru'])
        await EditClient.ism.set()
    elif call.data == 'client:surname':
        if lang == 'uz':
            await call.message.answer(text_client_up()['familiya'])
        else:
            await call.message.answer(text_client_up()['familiya_ru'])
        await EditClient.familiya.set()
    elif call.data == 'client:phone':
        if lang == 'uz':
            await call.message.answer(text_client_up()['telefon'])
        else:
            await call.message.answer(text_client_up()['telefon_ru'])
        await EditClient.telefon.set()
    elif call.data == 'pra':
        if lang == 'uz':
            await call.message.answer(text_client_up()['prava'], reply_markup=prava(lang))
        else:
            await call.message.answer(text_client_up()['prava_ru'], reply_markup=prava(lang))
        await EditClient.prava.set()
    await call.answer(cache_time=3)


@dp.message_handler(content_types=['text'], state=EditClient.ism)
async def set_name(mes: Message, state: FSMContext):
    data = {'ism': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/client/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–ò—Å–º–∏–Ω–≥–∏–∑ {res['ism']} –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_client(lang))
    else:
        await mes.answer(f"–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω—ë–Ω {res['ism']}", reply_markup=menu_client(lang))
    await state.finish()


@dp.message_handler(content_types=['text'], state=EditClient.familiya)
async def set_surname(mes: Message, state: FSMContext):
    data = {'familiya': mes.text}
    rp = requests.patch(url=f"{BASE_URL}/client/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–§–∞–º–∏–ª–∏—è–Ω–≥–∏–∑ {res['familiya']} –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_client(lang))
    else:
        await mes.answer(f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω—ë–Ω {res['familiya']}", reply_markup=menu_client(lang))
    await state.finish()


@dp.message_handler(regexp=re.compile(r"^[378]{2}|9[01345789]\d{7}$"), state=EditClient.telefon)
async def set_phone(mes: Message, state: FSMContext):
    data = {'telefon': f"998{mes.text}"}
    rp = requests.patch(url=f"{BASE_URL}/client/{mes.from_user.id}/", data=data)
    res = rp.json()
    if lang == 'uz':
        await mes.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω–∏–Ω–≥–∏–∑ {res['telefon']} –≥–∞ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_client(lang))
    else:
        await mes.answer(f"–¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑–º–µ–Ω—ë–Ω {res['telefon']}", reply_markup=menu_client(lang))
    await state.finish()


@dp.message_handler(content_types=['text'], state=EditClient.telefon)
async def set_phone(mes: Message):
    if lang == 'uz':
        await mes.answer(text_client_up()['telefon_qayta'])
    else:
        await mes.answer(text_client_up()['telefon_qayta_ru'])
    await EditClient.telefon.set()


@dp.message_handler(content_types=['text'], state=EditClient.prava)
async def set_cat(mes: Message, state: FSMContext):
    data = {'prava': mes.text}
    requests.patch(url=f"{BASE_URL}/client/{mes.from_user.id}/", data=data)
    if lang == 'uz':
        await mes.answer(f"“≤–∞–π–¥–æ–≤—á–∏–ª–∏–∫ –≥—É–≤–æ“≥–Ω–æ–º–∞–Ω–≥–∏–∑ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!", reply_markup=menu_client(lang))
    else:
        await mes.answer(f"–í–∞—à–∏ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=menu_client(lang))
    await state.finish()


@dp.message_handler(text=["–ú–∞—à“ì—É–ª–æ—Ç", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"])
async def ses(mes: Message):
    if lang == 'uz':
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=action_session(lang))
    else:
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=action_session(lang))


@dp.message_handler(text=['‚¨ÖÔ∏èO—Ä—Ç–≥–∞', '‚¨ÖÔ∏è–ù–∞–∑–∞–¥'])
async def ses(mes: Message):
    if lang == 'uz':
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=action_session(lang))
    else:
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=action_session(lang))


@dp.message_handler(text=["–ú–∞—à“ì—É–ª–æ—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏", "–°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π"])
async def session(mes: Message):
    if lang == 'uz':
        await mes.answer("–ú–∞—à“ì—É–ª–æ—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥üëá", reply_markup=sessions(lang))
    else:
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫üëá", reply_markup=sessions(lang))


@dp.message_handler(text=["–ë—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å"])
async def lesson(mes: Message):
    rp = requests.get(url=f"{BASE_URL}/session/{mes.from_user.id}")
    res = rp.json()
    row = ""
    for (i, se) in zip(range(1, 6), res['results']):
        row += f"{i}. {se['instructor']} {se['moshina']} {se['vaqt']}\n     {se['i_telefoni']}\n"
    await mes.answer(f"–ù–∞—Ç–∏–∂–∞ {res['count']} —Ç–∞\n" + row,
                     reply_markup=create_after_sessions_for_cl(res, page=1))


@dp.message_handler(text=["–ë—û–ª–∏–± —É—Ç–≥–∞–Ω", "–ü—Ä–æ—à–µ–¥—à–∏–π"])
async def lesson(mes: Message):
    rp = requests.get(url=f"{BASE_URL}/session/finished/{mes.from_user.id}")
    res = rp.json()
    row = ""
    for (i, se) in zip(range(1, 6), res['results']):
        row += f"{i}. {se['instructor']} {se['moshina']} {se['vaqt']}\n     {se['i_telefoni']}\n"
    await mes.answer(f"–ù–∞—Ç–∏–∂–∞ {res['count']} —Ç–∞\n" + row,
                     reply_markup=before_sessions_for_cl(page=1))


@dp.callback_query_handler(text_contains='rav')
async def action(call: CallbackQuery):
    page = int(call.data.split('rav:')[1])
    r = requests.get(url=f"{BASE_URL}/session/{call.from_user.id}/?page={page}")
    res = r.json()
    if res['next']:
        r1 = requests.get(url=f"{BASE_URL}/session/{call.from_user.id}/?page={page + 1}")
        res = r1.json()
        row = ""
        for (i, se) in zip(range(1, 6), res['results']):
            row += f"{i}. {se['instructor']} {se['moshina']} {se['vaqt']}\n     {se['i_telefoni']}\n"
        await call.message.edit_text(f"–ù–∞—Ç–∏–∂–∞ {res['count']} —Ça\n" + row,
                                     reply_markup=create_after_sessions_for_cl(res, page + 1))
    else:
        if lang == 'uz':
            await call.answer("–ë—É –æ—Ö–∏—Ä–≥–∏ —Å–∞—Ö–∏—Ñ–∞!")
        else:
            await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!")
    await call.answer(cache_time=3)


@dp.callback_query_handler(text_contains='bob')
async def action(call: CallbackQuery):
    page = int(call.data.split('bob:')[1])
    r = requests.get(url=f"{BASE_URL}/session/{call.from_user.id}/?page={page}")
    res = r.json()
    if res['previous']:
        r1 = requests.get(url=f"{BASE_URL}/session/{call.from_user.id}/?page={page - 1}")
        res = r1.json()
        row = ""
        for (i, se) in zip(range(1, 6), res['results']):
            row += f"{i}. {se['instructor']} {se['moshina']} {se['vaqt']}\n     {se['i_telefoni']}\n"
        await call.message.edit_text(f"–ù–∞—Ç–∏–∂–∞ {res['count']} —Ça\n" + row,
                                     reply_markup=create_after_sessions_for_cl(res, page - 1))
    else:
        if lang == 'uz':
            await call.answer("–ë—É –±–∏—Ä–∏–Ω—á–∏ —Å–∞—Ö–∏—Ñ–∞!")
        else:
            await call.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!")
    await call.answer(cache_time=3)


@dp.callback_query_handler(text_contains='kam')
async def action(call: CallbackQuery):
    page = int(call.data.split('kam:')[1])
    r = requests.get(url=f"{BASE_URL}/session/finished/{call.from_user.id}/?page={page}")
    res = r.json()
    if res['next']:
        r1 = requests.get(url=f"{BASE_URL}/session/finished/{call.from_user.id}/?page={page + 1}")
        res = r1.json()
        row_2 = ""
        for (i, se) in zip(range(1, 6), res['results']):
            row_2 += f"{i}. {se['instructor']} {se['moshina']} {se['vaqt']}\n     {se['i_telefoni']}\n"
        await call.message.edit_text(f"–ù–∞—Ç–∏–∂–∞ {res['count']} —Ça\n" + row_2,
                                     reply_markup=before_sessions_for_cl(page + 1))
    else:
        if lang == 'uz':
            await call.answer("–ë—É –æ—Ö–∏—Ä–≥–∏ —Å–∞—Ö–∏—Ñ–∞!")
        else:
            await call.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!")
    await call.answer(cache_time=3)


@dp.callback_query_handler(text_contains='jal')
async def action(call: CallbackQuery):
    page = int(call.data.split('jal:')[1])
    r = requests.get(url=f"{BASE_URL}/session/finished/{call.from_user.id}/?page={page}")
    res = r.json()
    if res['previous']:
        r1 = requests.get(url=f"{BASE_URL}/session/finished/{call.from_user.id}/?page={page - 1}")
        res = r1.json()
        row_2 = ""
        for (i, se) in zip(range(1, 6), res['results']):
            row_2 += f"{i}. {se['instructor']} {se['moshina']} {se['vaqt']}\n     {se['i_telefoni']}\n"
        await call.message.edit_text(f"–ù–∞—Ç–∏–∂–∞ {res['count']} —Ça\n" + row_2,
                                     reply_markup=before_sessions_for_cl(page - 1))
    else:
        if lang == 'uz':
            await call.answer("–ë—É –±–∏—Ä–∏–Ω—á–∏ —Å–∞—Ö–∏—Ñ–∞!")
        else:
            await call.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!")
    await call.answer(cache_time=3)


@dp.callback_query_handler(text_contains='scl:')
async def daa(call: CallbackQuery, state: FSMContext):
    s_id = call.data.split('scl:')[1]
    await state.update_data(
        {'session_id': s_id}
    )
    if lang == 'uz':
        await call.message.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=edit_session(lang))
    else:
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=edit_session(lang))
    await call.answer(cache_time=1)


@dp.message_handler(text=['–ú–∞—à“ì—É–ª–æ—Ç –º–∞–Ω–∑–∏–ª–∏–Ω–∏ –æ–ª–∏—à', "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"])
async def delete(mes: Message, state: FSMContext):
    s_id = await state.get_data()
    rp = requests.get(url=f"{BASE_URL}/session/location/{s_id['session_id']}/")
    r = rp.json()
    await mes.answer_location(latitude=r['lat'], longitude=r['lon'])
    await state.finish()


@dp.message_handler(text=['–ú–∞—à“ì—É–ª–æ—Ç–Ω–∏ –±–µ–∫–æ—Ä –∫–∏–ª–∏—à', '–û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'])
async def delete(mes: Message, state: FSMContext):
    s_id = await state.get_data()
    rp = requests.delete(url=f"{BASE_URL}/session/detail/{s_id['session_id']}/")
    rs = rp.json()
    if rp.status_code == 200:
        if lang == 'uz':
            await mes.answer("–ú–∞—à“ì—É–ª–æ—Ç —û—á–∏—Ä–∏–ª–¥–∏", reply_markup=menu_client(lang))
        else:
            await mes.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=menu_client(lang))
        await notify_session_deleted(instructor=rs['id1'], time=rs['vaqt'], lang=lang)
    else:
        if lang == 'uz':
            await mes.answer("–ù–∏–º–∞–¥–∏—Ä —Ö–∞—Ç–æ –∫–µ—Ç–¥–∏ –±–æ—à“õ–∞—Ç–¥–∞–Ω —û—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥!")
        else:
            await mes.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–µ!")
    await state.finish()


@dp.message_handler(text=["–ë–æ—à –º–µ–Ω—é", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
async def menu(mes: Message):
    if lang == 'uz':
        await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_client(lang))
    else:
        await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_client(lang))


@dp.message_handler(text=["–ú–∞—à“ì—É–ª–æ—Ç –Ω–∞—Ä—Ö–ª–∞—Ä–∏", "–¶–µ–Ω—ã –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"])
async def price(mes: Message):
    r = requests.get(url=f"{BASE_URL}/session/price/list/")
    pr = r.json()
    text = ""
    if lang == 'uz':
        for i in pr:
            text += f"{i['category']} —Ç–æ–∏—Ñ–∞ - {i['price']} —Å—û–º —Å–æ–∞—Ç–∏–≥–∞\n"
    else:
        for i in pr:
            text += f"{i['category']} –∫–∞—Ç–µ–≥–æ—Ä–∏—è - {i['price']} –≤ —á–∞—Å\n"
    await mes.answer(text)


@dp.message_handler(text=["–ü—Ä–æ—Ñ–∏–ª–Ω–∏ —û—á–∏—Ä–∏—à", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"])
async def a(mes: Message):
    if lang == 'uz':
        await mes.answer('–ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑–Ω–∏ —û—á–∏—Ä–º–æ“õ—á–∏–º–∏—Å–∏–∑?', reply_markup=profile_delete(lang))
    else:
        await mes.answer('–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?', reply_markup=profile_delete(lang))
    await DeleteCl.yes_or_no.set()


@dp.message_handler(state=DeleteCl.yes_or_no)
async def delete_profile(mes: Message, state: FSMContext):
    if (mes.text == '“≤–∞') or (mes.text == '–î–∞'):
        rp = requests.delete(url=f"{BASE_URL}/client/delete/{mes.from_user.id}/")
        if rp.status_code == 204:
            if lang == 'uz':
                await mes.answer("–ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥–∏–∑ —û—á–∏—Ä–∏–ª–¥–∏", reply_markup=ReplyKeyboardRemove())
            else:
                await mes.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω", reply_markup=ReplyKeyboardRemove())
        else:
            if lang == 'uz':
                await mes.answer("–ù–∏–º–∞–¥–∏—Ä —Ö–∞—Ç–æ –∫–µ—Ç–¥–∏ “õ–∞–π—Ç–∞–¥–∞–Ω —û—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥!")
            else:
                await mes.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    elif (mes.text == '–ô—û“õ') or (mes.text == '–ù–µ—Ç'):
        if lang == 'uz':
            await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_client(lang))
        else:
            await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_client(lang))
    await state.finish()


@dp.callback_query_handler(text=['juda_yomon', 'yomon', 'qoniqarli', 'yaxshi', 'zur'])
async def rate(call: CallbackQuery):
    rt = 0
    if call.data == 'juda_yomon':
        rt = 1
    elif call.data == 'yomon':
        rt = 2
    elif call.data == 'qoniqarli':
        rt = 3
    elif call.data == 'yaxshi':
        rt = 4
    elif call.data == 'zur':
        rt = 5
    rp = requests.patch(url=f"{BASE_URL}/instructor/rating/",
                        data={'client': call.from_user.id, 'rate': rt})
    res = rp.json()
    if lang == 'uz':
        await call.message.answer(f"{res['message']}", reply_markup=menu_client(lang))
    else:
        await call.message.answer(f"{res['message_ru']}", reply_markup=menu_client(lang))
    await call.answer(cache_time=3)
