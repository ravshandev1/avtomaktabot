from aiogram import types
from loader import dp
import requests
from data.config import BASE_URL
from keyboards.default.is_authenticated import menu_instructor, menu_client
from keyboards.default.register import usertype
from aiogram.dispatcher.filters.builtin import CommandStart
from keyboards.inline.edit_profile import change_lang

lang = ''


@dp.message_handler(CommandStart())
async def stt(mes: types.Message):
    res = requests.get(url=f"{BASE_URL}/session/user/?id={mes.from_user.id}")
    r = res.json()
    # if r['message'] == "Client":
    #     if lang == 'ru':
    #         await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_client(lang))
    #     else:
    #         await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_client(lang))
    if r['message'] == "Instructor":
        if lang == 'ru':
            await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_instructor(lang))
        else:
            await mes.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_instructor(lang))
    else:
        await mes.answer(
            f"–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, {mes.from_user.full_name}!\n–ê–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥",
            reply_markup=change_lang)


@dp.callback_query_handler(text=['uz', 'ru'])
async def start(call: types.CallbackQuery):
    res = requests.get(url=f"{BASE_URL}/session/user/?id={call.from_user.id}")
    r = res.json()
    await call.message.delete()
    await call.answer(cache_time=3)
    global lang
    # if r['message'] == "Client":
    #     if call.data == 'uz':
    #         lang = 'uz'
    #         await call.message.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_client(lang))
    #     elif call.data == 'ru':
    #         lang = 'ru'
    #         await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_client(lang))
    if r['message'] == "Instructor":
        if call.data == 'uz':
            lang = 'uz'
            await call.message.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—É–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=menu_instructor(lang))
        elif call.data == 'ru':
            lang = 'ru'
            await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=menu_instructor(lang))
    else:
        if call.data == 'uz':
            lang = 'uz'
            await call.message.answer(
                f"–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, {call.from_user.full_name}!\n–ê–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑. –ë–æ—Ç–∏–º–∏–∑–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à —É—á—É–Ω —û–∑–∏–Ω–≥–∏–∑–≥–∞ –∫–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.",
                reply_markup=usertype(lang))
        elif call.data == 'ru':
            lang = 'ru'
            await call.message.answer(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.full_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç.–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —Å–µ–±—è –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª",
                reply_markup=usertype(lang))
